#pragma once

#include "Base/Macros.h"
#include <cstddef>
#include <cstdint>

//----------------------------------------------------------------------------------------------------------------------
// Represents a four character identifier in a chunked stream file.
// The identifier is always stored in reading order, from left to right - irrespective of machine endianess.
//----------------------------------------------------------------------------------------------------------------------
struct CSFFourCID {
    union {
        uint8_t     idChars[4];
        uint32_t    idBits;         // So four chars can be compared at a time
    };
    
    CSFFourCID() noexcept = default;
    CSFFourCID(const CSFFourCID& other) noexcept = default;

    inline constexpr CSFFourCID(
        const uint8_t c1,
        const uint8_t c2,
        const uint8_t c3,
        const uint8_t c4
    ) noexcept 
        : idChars{ c1, c2, c3, c4 }
    {
    }

    static inline constexpr CSFFourCID make(const char* const pStr) noexcept {
        uint8_t c1 = 0;
        uint8_t c2 = 0;
        uint8_t c3 = 0;
        uint8_t c4 = 0;

        if (pStr[0]) {
            c1 = (uint8_t) pStr[0];

            if (pStr[1]) {
                c2 = (uint8_t) pStr[1];

                if (pStr[2]) {
                    c3 = (uint8_t) pStr[2];
                    c4 = (uint8_t) pStr[3];     // Don't care if this is NUL!
                }
            }
        }

        return CSFFourCID(c1, c2, c3, c4);
    }

    inline constexpr bool operator == (const CSFFourCID& other) const noexcept {
        return (idBits == other.idBits);
    }

    inline constexpr bool operator != (const CSFFourCID& other) const noexcept {
        return (idBits != other.idBits);
    }
};

//----------------------------------------------------------------------------------------------------------------------
// Utility stuff relating for handling 3DO 'stream' files that have been generated by the 3DO SDK tool 'weaver'.
// Streams files consist of a series of streams that have been broken up into chunks, and packed into one file.
// The chunks are interleaved so they can be read together in tandem, for efficient streaming of mixed content off a CD-ROM.
//
// In 3DO Doom these stream files are just used to contain audio and video data for the intro movies.
//----------------------------------------------------------------------------------------------------------------------
BEGIN_NAMESPACE(ChunkedStreamFileUtils)

//----------------------------------------------------------------------------------------------------------------------
// Extracts the entire data for the specified sub stream in the given stream file.
// The data and it's size are returned in the given input variables.
// Returns 'false' on failure to read the stream.
//----------------------------------------------------------------------------------------------------------------------
bool getSubStreamData(
    const std::byte* const pStreamFileData,
    const uint32_t streamFileSize,
    const CSFFourCID subStreamId,
    std::byte*& pSubStreamDataOut,
    uint32_t& subStreamSizeOut
) noexcept;

END_NAMESPACE(ChunkedStreamFileUtils)
